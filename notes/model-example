:%s/ \\".\{-}\\"
~120 subs
:%s/\[\[/\r\t\t\[\[/g
1409 sub on iliza
state line 1351 iliza_model1.json
  [standing, in], {the}

what does the model look like before being exported?
can i override the Text.make_sentence(init_state='')
  so that a response word only has to match one in the tuple?
what does prefix contain?

"{\"state_size\": 2, \"chain\": \"
    [[[\\\"___BEGIN__\\\", \\\"___BEGIN__\\\"], {\\\"this\\\": 1, \\\"go\\\": 1}], 
    [[\\\"___BEGIN__\\\", \\\"this\\\"], {\\\"is\\\": 1}], 
    [[\\\"this\\\", \\\"is\\\"], {\\\"a\\\": 1}], 
    [[\\\"is\\\", \\\"a\\\"], {\\\"test\\\": 1}], 
    [[\\\"a\\\", \\\"test\\\"], {\\\"for\\\": 1}], 
    [[\\\"test\\\", \\\"for\\\"], {\\\"the\\\": 1}], 
    [[\\\"for\\\", \\\"the\\\"], {\\\"markovify\\\": 1}], 
    [[\\\"the\\\", \\\"markovify\\\"], {\\\"package.\\\": 1}], 
    [[\\\"markovify\\\", \\\"package.\\\"], {\\\"i\\\": 1}], 
    [[\\\"package.\\\", \\\"i\\\"], {\\\"want\\\": 1}], 
    [[\\\"i\\\", \\\"want\\\"], {\\\"to\\\": 1}], 
    [[\\\"want\\\", \\\"to\\\"], {\\\"see\\\": 1}], 
    [[\\\"to\\\", \\\"see\\\"], {\\\"if\\\": 1}], 
    [[\\\"see\\\", \\\"if\\\"], {\\\"we\\\": 1}], 
    [[\\\"if\\\", \\\"we\\\"], {\\\"can\\\": 1}], 
    [[\\\"we\\\", \\\"can\\\"], {\\\"somehow\\\": 1}], 
    [[\\\"can\\\", \\\"somehow\\\"], {\\\"assign\\\": 1}], 
    [[\\\"somehow\\\", \\\"assign\\\"], {\\\"a\\\": 1}], 
    [[\\\"assign\\\", \\\"a\\\"], {\\\"begin\\\": 1}], 
    [[\\\"a\\\", \\\"begin\\\"], {\\\"to\\\": 1}], 
    [[\\\"begin\\\", \\\"to\\\"], {\\\"each\\\": 1}], 
    [[\\\"to\\\", \\\"each\\\"], {\\\"word\\\": 1}], 
    [[\\\"each\\\", \\\"word\\\"], {\\\"in\\\": 1}], 
    [[\\\"word\\\", \\\"in\\\"], {\\\"the\\\": 1}], 
    [[\\\"in\\\", \\\"the\\\"], {\\\"json\\\": 1}], 
    [[\\\"the\\\", \\\"json\\\"], {\\\"model.\\\": 1}], 
    [[\\\"json\\\", \\\"model.\\\"], {\\\"do\\\": 1}], 
    [[\\\"model.\\\", \\\"do\\\"], {\\\"you\\\": 1}], 
    [[\\\"do\\\", \\\"you\\\"], {\\\"think\\\": 1}], 
    [[\\\"you\\\", \\\"think\\\"], {\\\"that\\\": 1}], 
    [[\\\"think\\\", \\\"that\\\"], {\\\"is\\\": 1}], 
    [[\\\"that\\\", \\\"is\\\"], {\\\"possible?\\\": 1}], 
    [[\\\"is\\\", \\\"possible?\\\"], {\\\"let's\\\": 1}], 
    [[\\\"possible?\\\", \\\"let's\\\"], {\\\"run\\\": 1}], 
    [[\\\"let's\\\", \\\"run\\\"], {\\\"our\\\": 1}], 
    [[\\\"run\\\", \\\"our\\\"], {\\\"code\\\": 1}], 
    [[\\\"our\\\", \\\"code\\\"], {\\\"and\\\": 1}], 
    [[\\\"code\\\", \\\"and\\\"], {\\\"find\\\": 1}], 
    [[\\\"and\\\", \\\"find\\\"], {\\\"out.\\\": 1}], 
    [[\\\"find\\\", \\\"out.\\\"], {\\\"___END__\\\": 1}], 
    [[\\\"___BEGIN__\\\", \\\"go\\\"], {\\\"ahead\\\": 1}], 
    [[\\\"go\\\", \\\"ahead\\\"], {\\\"and\\\": 1}], 
    [[\\\"ahead\\\", \\\"and\\\"], {\\\"do\\\": 1}], 
    [[\\\"and\\\", \\\"do\\\"], {\\\"the\\\": 1}], 
    [[\\\"do\\\", \\\"the\\\"], {\\\"lights.\\\": 1}], 
    [[\\\"the\\\", \\\"lights.\\\"], {\\\"___END__\\\": 1}]]\", \"parsed_sentences\":                         
    [[\"this\", \"is\", \"a\", \"test\", \"for\", \"the\", \"markovify\", \"package.\", \"i\", \"want\",      \"to\", \"see\", \"if\", \"we\", \"can\", \"somehow\", \"assign\", \"a\", \"begin\", \"to\", \"each\",        \"word\", \"in\", \"the\", \"json\", \"model.\", \"do\", \"you\", \"think\", \"that\", \"is\", \"possible?\", \"let's\", \"run\", \"our\", \"code\", \"and\", \"find\", \"out.\"], [\"go\", \"ahead\", \"and\", \"do\",     \"the\", \"lights.\"]]}"


  lines 40-57 in iliza_model1                                                  
    
    [["a", "lot"], {"more": 1}],
    [["lot", "more"], {"at": 1}], 
    [["more", "at"], {"risk": 1}], 
    [["at", "risk"], {"for": 1}],  
    [["risk", "for"], {"us.": 1}], 
    [["for", "us."], {"maybe": 1}], 
    [["us.", "maybe"], {"one": 1}], 
    [["maybe", "one"], {"day\u2026": 1, "day": 1, "day.": 1}],
    [["one", "day\u2026"], {"in": 1}], 
    [["day\u2026", "in"], {"a": 1}], 
    [["in", "a"], {"utopia": 1}], 
    [["a", "utopia"], {"where": 1}], 
    [["utopia", "where"], {"men": 1}], 
    [["where", "men"], {"and": 1}], 
    [["men", "and"], {"women": 2}], 
    [["and", "women"], {"are": 2}], 
    [["women", "are"], {"considered": 1, "wired": 1}],
    [["are", "considered"], {"equal,": 1}], 


27 END tokens

debug notes: text.py:move():
print(self.begin_choices)
('so', 'women', 'mmm,', "boy's", 'your', 'i', '40%', '127', 'shot', "there's", "it's", 'the', 'before', "we're", 'in', 'girls', 'went', 'because', 'so,', 'when', 'said', 'again,', 'we')
print(self.begin_cumdist)
[2, 3, 4, 5, 6, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]
print(self.begin_choices.length)
AttributeError: 'tuple' object has no attribute 'length'
print(len(self.begin_choices))
None
23
print(len(self.begin_cumdist))
None
23

how do i disregard one of the tuples in Text.make_sentence()?



chain.py:93

print(self.model[('standing', 'in')])
None
{'the': 1}

print(self.model[('standing', 'in')].items())
None
dict_items([('the', 1)])

print(*self.model[('standing', 'in')].items())
None
('the', 1)

print(zip(*self.model[('standing', 'in')].items()))
None
<zip object at 0x7fcafc075948>

chain.py:94

print(choices)
None
('the',)
print(weights)
None
(1,)
print(accumulate(weights))
None
<generator object accumulate at 0x7fb4981f34f8>
print(list(accumulate(weights)))
None
[1]

either:
return model[state] where position of one item in state
or
try to return where only one variable in init_state matches a state


print( state)
None
('standing', 'in')

print(type(state))
None
<class 'tuple'>

print(type(state[0]))
None
<class 'str'>

print("standing" in state)
None
True

print("fire" in state)
None
False

print(type(self.model))
None
<class 'dict'>

print(*self.model)
returns keys of model

print(self.model)
returns whole dictionary

print(type(('key','value')))
None
<class 'tuple'>


for keytuple in dict:
	if input in keytuple:
		return keytuple

    
    # M: iterate through model dict. if state[0] (user input str), return tuple
    def find_state(self, state):
        """
        """
        for key in self.model:
            if state[0] in key:
                print("found key", key)










